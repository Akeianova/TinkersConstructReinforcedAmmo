import org.codehaus.groovy.runtime.GStringImpl
import java.util.concurrent.TimeUnit
import java.util.Properties
import groovy.util.ConfigSlurper

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

plugins {
    id("org.ajoberstar.grgit") version("3.1.1")
}
apply plugin: "java"
apply plugin: "idea"
apply plugin: "forge"
apply plugin: "signing"

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
    }
}

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// Finds and sets version data
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "build${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}" as GStringImpl
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${System.getenv().ARTIFACT_VERSION}" as GStringImpl
}

group = 'tconstruct'
version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = 'run'
    replace '${version}', project.version
}

processResources
{
    inputs.property "version", artifact_version
    inputs.property "MCversion", config.minecraft_version
	
    // Replace stuff in text files, not binaries.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        // Replace version and MCversion
        expand 'version':artifact_version,'MCversion':config.minecraft_version
    }
        
    // Copy everything else that's not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
}

dependencies {
    compile "mantle:Mantle:${config.minecraft_version}-${config.mantle_version}:deobf"
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.CCLIB_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.ccc_version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft_version}-${config.NEI_version}:dev"
    compile "codechicken:ForgeMultipart:${config.minecraft_version}-${config.fmp_version}:dev"
    //compile "mcp.mobius.waila:Waila:${config.waila_version}:dev"
}



// Add Coremod Manifest
jar {
    manifest {
        attributes 'FMLAT': 'TConstruct_at.cfg'
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    getArchiveClassifier().set("deobf")
	manifest {
        attributes 'FMLAT': 'TConstruct_at.cfg'
    }
}

// Create API library jar
task libJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include "tconstruct/library/**/*"
    }
    getArchiveClassifier().set 'lib'
}

// Create Maven source jar
task sourceJar(type: Jar, dependsOn:classes) {
    getArchiveClassifier().set 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives deobfJar
    archives libJar
    archives sourceJar
}